package swea.모의;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

// bfs: 39,780 kb, 138 ms,  dfs: 37,768 kb, 130 ms

public class SWEA_모의_1953_탈주범검거 {
    static BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
    static StringBuilder output = new StringBuilder();
    static StringTokenizer tokens;

    // 대상을 단순화 - 
    static int[][] deltas = { { -1, 0 }, { 0, -1 }, { 0, 1 }, { 1, 0 } }; // 상.좌 | 우, 하
    // 파이프 규정해두기
    static int[][] types = {
            {},
            { 0, 1, 2, 3 }, // 상하좌우
            { 0, 3 }, // 상하
            { 1, 2 }, // 좌우
            { 0, 2 }, // 상,우
            { 2, 3 }, // 우,하
            { 1, 3 }, // 좌,하
            { 0, 1 }// 상, 좌
    };

    static int T;
    static int N, M, R, C, L;
    static int[][] map;
    static int A;

    public static void main(String[] args) throws NumberFormatException, IOException {
        input = new BufferedReader(new StringReader(src));
        T = Integer.parseInt(input.readLine());
        for (int t = 1; t <= T; t++) {
            tokens = new StringTokenizer(input.readLine());
            N = Integer.parseInt(tokens.nextToken());
            M = Integer.parseInt(tokens.nextToken());
            R = Integer.parseInt(tokens.nextToken());
            C = Integer.parseInt(tokens.nextToken());
            L = Integer.parseInt(tokens.nextToken());

            map = new int[N][M];
            for (int n = 0; n < N; n++) {
                tokens = new StringTokenizer(input.readLine());
                for (int m = 0; m < M; m++) {
                    map[n][m] = Integer.parseInt(tokens.nextToken());
                }
            }
            /*
            for (int[] row : map) {
                System.out.println(Arrays.toString(row));
            }
            */
            // 입력 완료

            // 입력받지 않는 전역 변수는 초기화!!!
            A = 0;
            // bfs();
            dfs(R, C, L, new int[N][M]);
            output.append(String.format("#%d %d%n", t, A));
        }
        System.out.println(output);
    }

    static void dfs(int r, int c, int l, int[][] visited) {
        // base part
        if (l == 0) {
            return;
        }
        // 할일 처리 - 순서 주의!!! 먼저 체크 하고 방문 처리!!
        // 방문지 증가 - 처음 방문 했을 때만.
        if (visited[r][c] == 0) {
            A++;
        }
        // 방문 처리
        visited[r][c] = l;

        // 자식 탐색
        int[] open = types[map[r][c]];
        for (int d : open) {
            int nr = r + deltas[d][0];
            int nc = c + deltas[d][1];

            if (isIn(nr, nc) && visited[nr][nc] < l && map[nr][nc] != 0 && canConnect(nr, nc, 3 - d)) {
                dfs(nr, nc, l - 1, visited);
            }
        }
    }

    static void bfs() {
        // 준비물
        Queue<Pipe> q = new LinkedList<>();
        boolean[][] visited = new boolean[N][M];

        // 초기화
        q.offer(new Pipe(R, C));
        visited[R][C] = true;
        L--; // 현재 한시간 경과!
        A = 1;// 맨홀의 위치 확보!!

        while (L > 0) {
            // 현재 queue에 있는 녀석들만 먼저 돌리기!!
            int size = q.size();

            while (size-- > 0) {
                // 대장 데려오기
                Pipe head = q.poll();

                for (int d : head.open) {
                    int nr = head.r + deltas[d][0];
                    int nc = head.c + deltas[d][1];

                    // 대상지점의 파이프와 연결할 수 있어야 한다.
                    // 영역 안에 있고, 미방문이고, 파이프이면서 연결할수 있다면????
                    if (isIn(nr, nc) && !visited[nr][nc] && map[nr][nc] != 0 && canConnect(nr, nc, 3 - d)) {
                        visited[nr][nc] = true;
                        q.offer(new Pipe(nr, nc));
                        A++;
                    }
                }
            }
            L--; // 한시간 경과
        }
    }

    /**
     * r, c의 pipe는 d 방향이 열려있는가?
     * 
     * @param r
     * @param c
     * @param d
     * @return
     */
    static boolean canConnect(int r, int c, int d) {
        for (int i : types[map[r][c]]) {
            if (i == d) {
                return true;
            }
        }
        return false;
    }

    static boolean isIn(int r, int c) {
        return 0 <= r && r < N && 0 <= c && c < M;
    }

    static class Pipe {
        int r, c;
        int[] open;

        public Pipe(int r, int c) {
            this.r = r;
            this.c = c;
            this.open = types[map[r][c]];
        }
    }

    static String src = "5\n"
                        + "5 6 2 1 3\n"
                        + "0 0 5 3 6 0\n"
                        + "0 0 2 0 2 0\n"
                        + "3 3 1 3 7 0\n"
                        + "0 0 0 0 0 0\n"
                        + "0 0 0 0 0 0\n"
                        + "5 6 2 2 6\n"
                        + "3 0 0 0 0 3\n"
                        + "2 0 0 0 0 6\n"
                        + "1 3 1 1 3 1\n"
                        + "2 0 2 0 0 2\n"
                        + "0 0 4 3 1 1\n"
                        + "10 10 4 3 9\n"
                        + "0 0 0 0 0 0 0 0 0 0\n"
                        + "0 0 0 7 5 0 5 0 0 0\n"
                        + "0 0 3 2 2 6 0 0 0 0\n"
                        + "0 4 7 2 2 2 7 0 0 4\n"
                        + "0 3 0 1 1 2 2 0 0 5\n"
                        + "0 5 6 1 1 1 1 6 2 5\n"
                        + "7 4 1 2 0 0 4 6 0 0\n"
                        + "5 3 1 7 0 2 2 6 5 7\n"
                        + "7 3 2 1 1 7 1 0 2 7\n"
                        + "3 4 0 0 4 0 5 1 0 1\n"
                        + "20 20 13 11 13\n"
                        + "0 0 0 1 4 4 4 0 0 0 0 0 0 0 0 1 2 3 1 0\n"
                        + "0 0 0 0 0 0 0 0 0 0 0 4 2 7 7 2 0 1 1 0\n"
                        + "0 0 0 0 0 0 0 0 0 6 2 4 4 2 0 4 7 0 6 0\n"
                        + "0 0 0 7 5 5 3 0 0 7 5 0 5 6 4 2 6 3 1 5\n"
                        + "0 0 0 1 2 6 3 3 7 0 3 6 2 4 5 6 7 7 5 7\n"
                        + "0 0 0 3 7 6 1 5 3 3 4 5 7 6 0 4 3 3 1 1\n"
                        + "0 1 2 1 5 6 1 6 1 6 5 1 6 0 0 3 4 1 7 6\n"
                        + "0 2 3 2 2 7 3 0 0 3 2 5 2 1 0 6 5 1 6 5\n"
                        + "0 2 5 7 0 7 1 3 3 4 1 3 3 0 2 3 3 2 4 1\n"
                        + "4 0 0 7 2 4 2 2 1 3 1 6 5 5 6 2 5 1 1 6\n"
                        + "5 6 4 0 3 6 5 2 2 6 1 2 0 1 7 5 7 2 2 2\n"
                        + "1 6 3 1 4 4 1 0 3 0 4 2 7 2 0 2 3 6 2 5\n"
                        + "1 5 7 2 1 1 4 4 2 1 0 2 7 1 6 2 6 6 2 2\n"
                        + "3 7 0 6 5 0 4 0 6 6 7 1 3 1 1 1 5 1 6 6\n"
                        + "0 4 0 1 6 2 1 0 7 0 4 2 5 2 7 0 2 7 1 6\n"
                        + "0 7 3 0 1 7 6 2 0 0 4 2 4 1 3 3 7 0 1 3\n"
                        + "0 1 1 4 3 7 4 5 2 2 4 7 4 7 7 4 6 0 1 6\n"
                        + "0 5 2 2 1 4 6 3 7 0 6 3 5 0 0 6 4 4 2 1\n"
                        + "0 1 2 4 5 6 0 2 0 0 5 6 2 4 6 4 7 6 3 7\n"
                        + "7 7 4 2 3 0 0 4 0 0 7 2 7 5 6 1 4 5 5 4\n"
                        + "50 50 20 12 18\n"
                        + "0 0 0 0 0 0 0 0 0 0 0 0 4 5 0 0 0 0 0 4 2 0 5 2 1 5 3 3 0 0 4 0 5 1 7 2 6 0 7 0 0 0 2 0 0 0 0 0 0 0\n"
                        + "6 7 0 0 0 0 0 0 0 0 0 0 4 5 5 3 6 3 0 2 3 3 0 0 5 6 1 5 3 4 7 6 2 2 1 1 6 5 6 4 6 2 0 0 0 0 2 3 1 0\n"
                        + "0 2 6 5 7 6 0 0 0 0 0 0 6 2 0 5 6 2 0 4 1 5 0 0 2 0 7 7 0 6 0 6 2 2 4 1 2 2 1 6 6 6 0 2 2 5 0 6 5 0\n"
                        + "0 0 0 4 7 2 7 3 7 0 0 0 0 6 7 6 5 1 1 1 2 2 1 3 1 2 7 6 1 2 1 2 4 1 6 1 1 7 3 1 6 6 6 1 1 1 7 0 0 0\n"
                        + "0 0 0 5 4 0 6 3 3 7 0 0 0 6 4 3 2 5 3 1 6 1 0 4 1 0 5 7 6 3 1 1 3 6 1 1 6 3 6 7 3 3 6 5 0 7 2 2 4 6\n"
                        + "0 6 0 7 6 0 7 4 0 5 3 0 4 3 2 0 5 7 3 0 1 3 6 7 7 5 1 7 5 2 0 5 3 1 3 7 1 1 1 5 2 5 1 3 6 7 7 6 4 3\n"
                        + "5 2 0 2 6 5 0 5 6 1 6 5 5 1 7 1 2 3 6 5 1 6 7 7 6 4 1 7 5 2 0 1 3 4 6 4 5 7 2 6 5 6 2 5 6 5 6 5 1 6\n"
                        + "1 2 0 7 0 5 5 0 7 6 2 2 1 3 5 5 3 6 3 7 6 4 1 3 1 3 7 0 3 7 0 2 5 6 1 3 4 1 5 1 7 4 1 7 7 0 4 7 5 5\n"
                        + "7 6 0 3 5 1 4 0 5 2 5 0 1 3 5 5 4 4 6 1 6 5 7 6 2 1 6 5 5 3 0 5 7 1 1 3 6 2 2 2 4 5 7 4 5 1 1 0 7 3\n"
                        + "2 5 4 0 3 1 4 5 6 3 7 0 4 5 3 6 4 5 1 7 4 7 3 1 1 7 7 1 1 5 6 4 7 1 2 6 4 1 7 2 7 1 6 0 5 0 0 0 1 0\n"
                        + "3 0 2 5 1 7 1 1 1 6 5 1 3 1 3 1 1 7 1 3 6 5 5 3 1 3 1 6 2 3 2 6 6 1 1 7 5 7 5 7 1 6 0 3 5 1 5 3 0 0\n"
                        + "0 0 3 2 0 1 4 1 4 1 0 7 3 2 2 4 2 4 4 6 1 1 1 7 2 4 7 4 3 6 3 5 1 6 1 3 7 7 2 6 3 2 1 0 4 6 2 6 3 0\n"
                        + "0 0 5 4 7 2 4 6 4 1 6 7 2 2 1 6 2 1 5 4 7 2 2 1 0 7 6 1 7 2 5 7 0 4 1 6 4 0 3 0 0 5 5 0 7 7 0 3 0 0\n"
                        + "0 0 6 4 3 1 3 1 4 7 2 1 2 4 3 4 1 6 2 1 5 1 1 6 0 7 2 7 2 4 7 4 0 3 7 7 3 3 5 2 0 4 3 0 4 2 0 1 3 5\n"
                        + "0 1 0 5 6 4 4 6 5 7 0 6 1 4 5 6 2 1 2 4 4 1 1 2 6 1 6 2 0 3 7 3 0 0 5 1 7 6 6 6 1 3 4 2 1 0 7 0 5 5\n"
                        + "0 7 2 1 4 2 7 3 0 2 1 4 3 5 1 1 1 1 7 1 4 4 1 7 6 0 1 2 0 5 2 0 0 0 5 4 0 3 7 5 3 1 4 1 2 7 2 6 6 4\n"
                        + "0 1 3 0 3 4 6 3 4 2 4 0 7 5 1 1 2 7 1 6 4 2 2 0 5 6 3 3 1 1 0 0 0 3 0 4 5 4 3 1 1 6 1 6 2 0 1 4 7 7\n"
                        + "0 3 0 0 2 6 1 4 7 5 1 4 3 2 5 1 4 3 6 3 0 2 4 5 7 5 6 2 0 5 6 3 6 4 6 2 0 0 6 0 7 2 2 6 0 0 0 0 0 0\n"
                        + "0 6 7 1 6 4 3 6 0 2 6 7 6 2 1 6 6 6 2 0 0 7 3 0 1 1 2 0 0 0 3 1 6 7 5 6 4 1 7 5 2 0 2 6 0 0 0 0 4 0\n"
                        + "0 6 7 7 3 3 0 2 0 1 6 4 1 1 1 6 2 3 3 4 2 3 5 0 5 7 7 6 2 7 2 7 3 1 0 5 6 7 1 6 4 1 5 0 0 0 0 0 0 0\n"
                        + "0 7 3 0 4 3 0 0 6 6 0 5 1 1 1 1 1 6 0 0 7 0 0 0 2 4 3 2 3 3 6 0 0 1 0 2 6 7 3 4 0 3 2 4 0 0 0 0 0 7\n"
                        + "0 0 4 7 2 0 0 0 1 4 2 4 7 7 2 4 2 4 0 5 6 0 0 0 7 0 2 7 4 4 1 6 1 4 2 3 6 2 0 6 5 3 5 0 3 5 6 0 0 1\n"
                        + "0 0 7 4 7 0 3 0 4 4 6 2 4 7 0 5 7 1 3 6 5 6 6 7 3 3 6 6 4 2 0 0 3 0 4 7 2 6 4 0 6 2 4 6 7 1 7 2 7 1\n"
                        + "0 0 2 6 0 0 6 5 0 4 1 2 2 2 2 7 2 1 0 4 6 4 1 0 1 1 2 2 0 4 4 2 0 0 3 0 3 6 2 2 7 6 6 0 4 6 0 2 2 2\n"
                        + "0 0 4 4 7 1 1 1 7 3 7 6 2 3 3 0 5 0 0 6 1 2 6 3 1 7 0 4 7 4 3 6 1 5 1 0 3 7 4 0 3 0 5 6 2 0 0 3 0 5\n"
                        + "0 0 7 3 0 5 4 0 7 4 0 0 4 5 7 1 3 2 3 3 5 3 5 3 5 5 5 5 4 2 3 6 0 3 1 7 2 4 5 3 0 0 5 3 6 0 0 7 3 6\n"
                        + "0 0 3 5 0 0 1 1 1 0 0 0 5 3 5 5 1 2 7 0 4 3 1 6 7 1 5 7 4 4 5 7 0 3 6 3 3 7 7 4 1 3 5 2 0 0 0 7 7 4\n"
                        + "0 0 7 6 3 5 0 7 2 7 7 5 4 0 0 7 0 4 0 0 3 2 3 1 5 7 4 6 0 3 5 5 2 0 6 0 0 0 2 1 1 4 3 6 2 0 5 1 1 6\n"
                        + "0 0 1 0 4 1 0 2 5 0 0 0 6 7 3 7 0 0 0 0 4 3 3 3 0 1 0 0 0 1 5 1 5 4 5 1 7 0 0 5 0 5 6 0 3 2 5 0 3 4\n"
                        + "0 0 0 0 0 4 0 2 3 1 6 6 6 3 5 3 6 0 0 0 4 7 0 6 1 7 1 0 0 5 5 2 5 1 0 1 1 3 3 4 1 4 2 0 6 3 0 0 6 4\n"
                        + "6 4 2 2 0 0 0 3 3 0 0 1 4 0 5 0 2 0 7 0 1 7 7 1 5 7 0 0 0 3 1 5 5 6 0 6 2 6 4 0 7 6 5 1 3 3 7 0 2 5\n"
                        + "0 0 0 7 7 0 0 4 4 3 1 6 1 0 1 3 3 1 4 5 7 3 7 0 0 4 0 0 0 7 3 7 2 2 0 1 5 0 7 5 5 2 5 1 0 2 0 0 3 2\n"
                        + "0 0 0 3 0 0 0 0 1 2 6 7 1 6 7 0 3 5 2 7 3 0 4 5 2 0 0 0 0 2 5 7 3 7 5 6 0 0 2 2 5 4 7 6 4 5 1 4 4 6\n"
                        + "0 4 3 0 0 0 0 3 5 6 3 2 0 3 6 0 6 0 0 1 4 3 6 2 4 7 4 7 1 5 0 4 0 0 2 0 0 0 3 7 6 1 2 5 3 5 2 3 3 3\n"
                        + "0 0 0 1 4 0 0 2 1 0 2 0 0 1 7 3 4 3 3 4 7 0 6 7 4 7 3 1 6 1 7 3 4 4 7 5 2 1 3 7 2 5 2 3 3 2 3 0 1 2\n"
                        + "0 0 0 0 1 1 0 0 5 7 3 6 6 0 0 6 5 4 2 7 0 0 4 5 5 0 5 7 3 3 0 3 5 5 3 6 0 0 3 5 4 0 0 7 5 1 6 0 0 7\n"
                        + "0 0 0 0 5 6 3 1 5 2 0 7 7 7 0 0 1 0 3 6 4 1 6 7 2 1 6 5 2 0 0 7 4 5 0 0 0 0 0 6 6 0 0 5 6 0 2 3 4 5\n"
                        + "0 0 7 1 0 1 6 5 6 0 0 5 4 5 7 1 1 6 5 2 2 0 3 7 4 5 2 6 4 0 0 3 4 0 0 0 0 0 0 7 7 7 7 6 4 3 4 4 0 0\n"
                        + "0 0 0 1 3 0 0 3 7 1 1 0 4 1 4 4 2 6 1 6 2 2 7 4 2 4 1 7 1 6 4 3 3 1 3 4 0 0 3 2 0 2 0 1 3 3 4 7 1 5\n"
                        + "0 0 0 3 4 0 0 2 0 5 5 0 0 1 4 4 0 4 0 1 6 6 4 2 1 0 0 3 7 0 4 3 3 2 3 5 3 5 0 4 0 5 0 3 0 7 7 3 5 6\n"
                        + "0 0 0 7 2 0 0 4 2 2 6 2 2 5 0 5 0 3 4 3 5 5 2 0 4 0 0 5 0 0 4 1 6 4 4 3 4 0 0 5 0 1 1 2 0 7 3 4 0 4\n"
                        + "0 0 1 1 4 4 1 0 0 0 3 5 4 5 4 2 7 4 6 1 6 7 0 3 0 7 1 7 6 6 3 0 5 7 6 6 4 7 3 4 5 0 0 0 0 6 1 1 5 3\n"
                        + "0 0 4 2 5 7 4 4 2 1 2 1 3 4 7 2 7 2 1 6 3 3 0 7 5 6 6 4 5 5 3 3 2 7 5 3 1 4 7 0 0 0 0 0 0 3 1 5 6 5\n"
                        + "0 0 0 4 4 1 0 0 6 0 0 7 5 7 5 1 7 3 6 0 2 4 3 4 7 7 3 0 0 0 1 5 5 0 6 7 7 7 4 4 3 6 3 7 5 0 1 1 0 2\n"
                        + "0 0 0 1 3 4 7 2 5 0 0 4 4 0 5 2 2 0 1 7 0 1 1 3 6 5 2 6 2 7 7 3 6 7 1 3 4 6 7 5 3 7 4 6 0 0 0 4 3 1\n"
                        + "0 0 0 2 1 6 3 5 4 0 0 6 0 0 6 7 0 0 5 2 0 7 7 0 7 0 0 7 7 6 0 0 1 1 0 1 0 1 3 1 0 0 4 7 7 0 0 0 2 6\n"
                        + "0 0 0 2 4 0 6 7 2 4 1 5 6 3 0 0 0 0 4 2 7 1 1 5 2 0 0 7 2 2 3 1 3 5 5 7 7 4 0 3 4 2 3 0 0 4 6 6 0 1\n"
                        + "0 0 0 4 6 1 0 3 6 4 7 3 5 0 0 0 0 0 0 7 0 0 3 6 2 1 0 2 3 4 6 7 5 0 7 0 5 4 5 1 5 0 0 0 0 4 5 3 1 0\n"
                        + "1 3 6 5 5 2 3 7 6 1 0 6 7 3 2 5 6 7 6 6 0 0 7 1 0 5 5 0 3 0 2 0 7 4 5 3 2 5 1 5 3 0 0 0 1 2 0 1 0 0\n"
                        + "1 7 3 0 2 0 7 0 4 6 1 1 5 0 7 0 5 7 7 2 6 0 0 1 0 2 3 3 4 2 7 5 3 7 0 0 4 6 6 6 3 0 0 0 7 7 7 5 7 2\n"
                        + "";
}
